<snippet>
	<content><![CDATA[
<?php
namespace ${1:Vendor}\\${2:MyExtension}\Domain\Model;


/***************************************************************
 *
 *  Copyright notice
 *
 *  (c) 2015 - stefan.fruhen@gmail.com
 *
 *  All rights reserved
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
 *  free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/

/**
 * ${3:MyModel}
 */
class ${3:MyModel} extends \TYPO3\CMS\Extbase\DomainObject\AbstractEntity {

	/**
	 * title
	 * 
	 * @var string
	 */
	protected \$title = '';

	/**
	 * crdate
	 * 
	 * @var \DateTime
	 */
	protected \$crdate = NULL;

	/**
	 * fooObjects
	 * 
	 * @var \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\\${1:Vendor}\\${2:MyExtension}\Domain\Model\FooObject>
	 * @cascade remove
	 */
	protected \$fooObjects = NULL;


	/**
	 * __construct
	 */
	public function __construct() {
		//Do not remove the next line: It would break the functionality
		\$this->initStorageObjects();
	}

	/**
	 * Initializes all ObjectStorage properties
	 * Do not modify this method!
	 * It will be rewritten on each save in the extension builder
	 * You may modify the constructor of this class instead
	 * 
	 * @return void
	 */
	protected function initStorageObjects() {
		\$this->fooObjects = new \TYPO3\CMS\Extbase\Persistence\ObjectStorage();
	}

	/**
	 * Returns the title
	 * 
	 * @return string \$title
	 */
	public function getTitle() {
		return \$this->title;
	}

	/**
	 * Sets the title
	 * 
	 * @param string \$title
	 * @return void
	 */
	public function setTitle(\$title) {
		\$this->title = \$title;
	}

	/**
	 * Returns the crdate
	 * 
	 * @return \DateTime \$crdate
	 */
	public function getCrdate() {
		return \$this->crdate;
	}

	/**
	 * Sets the crdate
	 * 
	 * @param \DateTime \$crdate
	 * @return void
	 */
	public function setCrdate(\DateTime \$crdate) {
		\$this->crdate = \$crdate;
	}

	/**
	 * Adds a FooObject
	 * 
	 * @param \\${1:Vendor}\\${2:MyExtension}\Domain\Model\FooObject \$fooObject
	 * @return void
	 */
	public function addFooObject(\\${1:Vendor}\\${2:MyExtension}\Domain\Model\FooObject \$fooObject) {
		\$this->fooObjects->attach(\$fooObject);
	}

	/**
	 * Removes a FooObject
	 * 
	 * @param \\${1:Vendor}\\${2:MyExtension}\Domain\Model\FooObject \$fooObjectToRemove The FooObject to be removed
	 * @return void
	 */
	public function removeFooObject(\\${1:Vendor}\\${2:MyExtension}\Domain\Model\FooObject \$fooObjectToRemove) {
		\$this->fooObjects->detach(\$fooObjectToRemove);
	}

	/**
	 * Returns the fooObjects
	 * 
	 * @return \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\\${1:Vendor}\\${2:MyExtension}\Domain\Model\FooObject> \$fooObjects
	 */
	public function getFooObjects() {
		return \$this->fooObjects;
	}

	/**
	 * Sets the fooObjects
	 * 
	 * @param \TYPO3\CMS\Extbase\Persistence\ObjectStorage<\\${1:Vendor}\\${2:MyExtension}\Domain\Model\FooObject> \$fooObjects
	 * @return void
	 */
	public function setFooObjects(\TYPO3\CMS\Extbase\Persistence\ObjectStorage \$fooObjects) {
		\$this->fooObjects = \$fooObjects;
	}    
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>ext_model</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope></scope>
</snippet>
